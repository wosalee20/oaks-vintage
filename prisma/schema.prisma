// --- new: banners for homepage ---
model Banner {
  id        String   @id @default(cuid())
  image     String
  link      String?
  alt       String?
  order     Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([active, order])
}

// --- new: discounts ---
enum DiscountType {
  PERCENT
  FIXED
}

model Discount {
  id         String        @id @default(cuid())
  code       String        @unique
  type       DiscountType
  value      Int           // percent or kobo (depends on type)
  startsAt   DateTime?
  endsAt     DateTime?
  maxUses    Int?
  used       Int           @default(0)
  active     Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([active, startsAt, endsAt])
}

// --- new: audit log ---
model AdminActivityLog {
  id        String   @id @default(cuid())
  actorId   String
  actor     User     @relation(fields: [actorId], references: [id])
  action    String   // e.g. "banner.update"
  entity    String   // e.g. "Banner"
  entityId  String
  before    Json?
  after     Json?
  ip        String?
  ua        String?
  createdAt DateTime @default(now())

  @@index([entity, entityId, createdAt])
}
// =========================
// Prisma Schema â€” Oaks Vintage
// =========================

// ---------- Generator & DB ----------
generator client {
  provider = "prisma-client-js"
  // Default output (node_modules/@prisma/client)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Auth (NextAuth) ----------
enum Role {
  USER
  ADMIN
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  // Local credentials (optional)
  passwordHash  String?
  phone         String?

  role          Role     @default(USER)

  accounts      Account[]
  sessions      Session[]

  // Shop relations
  addresses     Address[]
  orders        Order[]
  cart          Cart?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  adminActivityLogs AdminActivityLog[] // relation for audit log

  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- Shop domain ----------
model Category {
  id          String    @id @default(cuid())
  slug        String    @unique
  name        String
  description String?
  products    Product[]

  @@index([name])
}

model Product {
  id          String         @id @default(cuid())
  slug        String         @unique
  title       String
  description String?
  priceKobo   Int            // store money as integer (kobo)
  currency    String         @default("NGN")
  stock       Int            @default(0)
  isActive    Boolean        @default(true)
  categoryId  String?
  category    Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  images      ProductImage[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([categoryId])
  @@index([createdAt])
  @@index([isActive, createdAt])
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id         String  @id @default(cuid())
  cartId     String
  cart       Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int     @default(1)
  priceKobo  Int     // snapshot price at add-to-cart

  // Enforce one row per product in a cart (quantities accumulate)
  @@unique([cartId, productId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model Order {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  status      OrderStatus  @default(PENDING)
  items       OrderItem[]
  totalKobo   Int
  currency    String       @default("NGN")
  addressId   String?
  address     Address?     @relation(fields: [addressId], references: [id], onDelete: SetNull)
  payment     Payment?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  trackingCode String?     // ðŸ‘ˆ NEW

  @@index([userId])
  @@index([status, createdAt])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int     @default(1)
  unitKobo   Int

  // Optional: 1 line per product in an order (quantities handle multiples)
  @@unique([orderId, productId])
  @@index([productId])
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName  String
  line1     String
  line2     String?
  city      String
  state     String?
  country   String
  phone     String?
  orders    Order[]

  @@index([userId])
}

enum PaymentStatus {
  INITIATED
  SUCCESS
  FAILED
}

model Payment {
  id         String        @id @default(cuid())
  orderId    String        @unique
  order      Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  provider   String        @default("paystack")
  reference  String        @unique
  amountKobo Int
  currency   String        @default("NGN")
  status     PaymentStatus @default(INITIATED)
  raw        Json?
  createdAt  DateTime      @default(now())
}
